--- 
title: "Tablero de ejemplo"
author: "Pronace SSyS"
format: 
  dashboard:
    orientation: columns
    
lang: es
editor_options: 
  chunk_output_type: console

filters:
  - shinylive
---

```{r}
#| label: prepara
#| echo: false
#| output: false
#| include: false
#| results: asis

# install latest r-plotly dev version:
# devtools::install_github("ropensci/plotly")

library(plotly)
library(shinyjs)
library(readxl)
library(shinythemes)
library(sf)
library(leaflet)
library(leaflet.extras)
library(stringr)
library(DT)
library(tidyverse, warn.conflicts = FALSE, quietly = FALSE)

#setwd("oh_my_gits/sunburst/")

edos <- st_read("Datos/Entidades-Mex.json", quiet = TRUE) 

pronas <- read_xlsx("Datos/Proyectos-Pronacess-SSyS.xlsx") %>% 
  janitor::clean_names() %>%  
  mutate(colapser = gsub(", ", "|", estado))  %>% 
  mutate(nombrecorto = str_wrap(nombrecorto, 8))

# 'https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv'
datos <- read_xlsx("Datos/Café.xlsx") %>% 
  mutate(grupo = replace_na(grupo, "")) %>% 
  janitor::clean_names()

datos2 <- read_xlsx("Datos/Café2.xlsx") %>% 
  mutate(grupo = replace_na(grupo, "")) %>% 
  janitor::clean_names()


```

# Presentación

::: {.card title="Quarto"}

Esta plataforma de desarrollo te permite combinar texto explicativo o analítico junto con código ejecutable en un mismo documento. Puedes encontrar más información sobre _Quarto_ en [https://quarto.org](https://quarto.org). Además, a partir de la versión 1.4, _Quarto_, incluye la opción para [crear Dahsboards](https://quarto.org/docs/dashboards/layout.html) con facilidad. 
:::


# Atlas-catálogo

## row { height = 80%}
## Column {width=50%}

```{r}
#| fig-width: 6
#| title: Círculo


fig <-  datos2 %>%
  plot_ly(ids = ~ .$id,
          labels = ~ .$etiqueta,
          parents = ~ .$grupo,
          maxdepth = 3,
          #branchvalues = 'total',
          customdata = .$id, 
          type = 'sunburst',
          source = "sunSource", 
          insidetextorientation = 'auto',
          marker = list(colors = ~ c("#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
                                     "#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880")))

fig


```

## Column {width=50%}

::: {.card title="Socioecosistemas y sustentabilidad"}

```{r}
#| title: Mapa

#Nasa: NASAGIBS.ViirsEarthAtNight2012
#Google map: Esri.WorldImagery
#Gray: Esri.WorldGrayCanvas
#Terrain: Esri.WorldTerrain
#Topo Map: Esri.WorldTopoMap

m <- leaflet(options = leafletOptions(zoomSnap = 0.25, 
                                      zoomDelta = 0.25,
                                      attributionControl = FALSE)) %>% 
   addTiles() %>% 
   setView( lng = -101, lat = 26, zoom = 4.5) %>% 
   addProviderTiles("Esri.WorldImagery")
m

```

:::

# Datos

```{r}

datatable(datos2)

```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600


library(shiny)
library(bslib)

# Define UI for app that draws a histogram ----
ui <- page_sidebar(sidebar = sidebar(width = 90, 
                                     open = "open",
                                     numericInput("n", "Sample count", 100),
                                     checkboxInput("pause", "Pause", FALSE)),
                   plotOutput("plot", width=1000))

server <- function(input, output, session) {
  data <- reactive({
    input$resample
    if (!isTRUE(input$pause)) {
      invalidateLater(1000)
    }
    rnorm(input$n)
  })
  
  output$plot <- renderPlot({
    hist(data(),
      breaks = 40,
      xlim = c(-2, 2),
      ylim = c(0, 1),
      lty = "blank",
      xlab = "value",
      freq = FALSE,
      main = ""
    )
    
    x <- seq(from = -2, to = 2, length.out = 500)
    y <- dnorm(x)
    lines(x, y, lwd=1.5)
    
    lwd <- 5
    abline(v=0, col="red", lwd=lwd, lty=2)
    abline(v=mean(data()), col="blue", lwd=lwd, lty=1)

    legend(legend = c("Normal", "Mean", "Sample mean"),
      col = c("black", "red", "blue"),
      lty = c(1, 2, 1),
      lwd = c(1, lwd, lwd),
      x = 1,
      y = 0.9
    )
  }, res=100)
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```



```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

library(shiny)
library(bslib)
library(ggplot2)

data(penguins, package = "palmerpenguins")

ui1 <- page_sidebar(title = "Penguins dashboard",
                   sidebar = sidebar(title = "Histogram controls",
                                     varSelectInput("var", "Select variable",
                                                    select_if(penguins, 
                                                              is.numeric)),
                                     numericInput("bins", "Number of bins", 30)),
                   card(card_header("Histogram"),
                        plotOutput("p")))

server1 <- function(input, output) 
  {output$p <- renderPlot(
       {ggplot(penguins) +
        geom_histogram(aes(!!input$var), bins = input$bins) +
        theme_bw(base_size = 20)})
  }

shinyApp(ui1, server1)
```

