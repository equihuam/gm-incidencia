--- 
title: "Tablero de ejemplo"
author: "Pronace SSyS"
format: 
  dashboard:
    orientation: columns
    
lang: es
editor_options: 
  chunk_output_type: console

filters:
  - shinylive
---

```{r}
#| label: prepara
#| echo: false
#| output: false
#| include: false
#| results: asis

# install latest r-plotly dev version:
# devtools::install_github("ropensci/plotly")

library(plotly)
library(readxl)
library(shinythemes)
library(sf)
library(leaflet)
library(leaflet.extras)
library(stringr)
library(DT)
library(tidyverse, warn.conflicts = FALSE, quietly = FALSE)

#setwd("oh_my_gits/sunburst/")

# 'https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv'
datos <- read_xlsx("Datos/Café.xlsx") %>% 
  mutate(grupo = replace_na(grupo, "")) %>% 
  janitor::clean_names()

datos2 <- read_xlsx("Datos/Café2.xlsx") %>% 
  mutate(grupo = replace_na(grupo, "")) %>% 
  janitor::clean_names()


edos <- st_read("Datos/Entidades-Mex.json", quiet = TRUE) 

pronas <- read_xlsx("Datos/Proyectos-Pronacess-SSyS.xlsx") %>% 
  janitor::clean_names() %>%  
  mutate(colapser = gsub(", ", "|", estado))  %>% 
  mutate(nombrecorto = str_wrap(nombrecorto, 8))


```

# Presentación

::: {.card title="Quarto"}

Esta plataforma de desarrollo te permite combinar texto explicativo o analítico junto con código ejecutable en un mismo documento. Puedes encontrar más información sobre _Quarto_ en [https://quarto.org](https://quarto.org). Además, a partir de la versión 1.4, _Quarto_, incluye la opción para [crear Dahsboards](https://quarto.org/docs/dashboards/layout.html) con facilidad. 
:::


# Atlas-catálogo

## row { height = 80%}
## Column {width=50%}

```{r}
#| fig-width: 6
#| title: Círculo


fig <-  datos2 %>%
  plot_ly(ids = ~ .$id,
          labels = ~ .$etiqueta,
          parents = ~ .$grupo,
          maxdepth = 3,
          #branchvalues = 'total',
          customdata = .$id, 
          type = 'sunburst',
          source = "sunSource", 
          insidetextorientation = 'auto',
          marker = list(colors = ~ c("#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
                                     "#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880")))

fig


```

## Column {width=50%}

::: {.card title="Socioecosistemas y sustentabilidad"}

```{r}
#| title: Mapa

#Nasa: NASAGIBS.ViirsEarthAtNight2012
#Google map: Esri.WorldImagery
#Gray: Esri.WorldGrayCanvas
#Terrain: Esri.WorldTerrain
#Topo Map: Esri.WorldTopoMap

m <- leaflet(options = leafletOptions(zoomSnap = 0.25, 
                                      zoomDelta = 0.25,
                                      attributionControl = FALSE)) %>% 
   addTiles() %>% 
   setView( lng = -101, lat = 26, zoom = 4.5) %>% 
   addProviderTiles("Esri.WorldImagery")
m

```

:::

# Datos

```{r}

datatable(datos2)

```

## column

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

library(bslib)
library(palmerpenguins)
library(ggplot2)

ui <- page_fillable(
  card(
    card_header(
      "Masa corporal de pingüinos",
      tooltip(
        bsicons::bs_icon("question-circle"),
        "Masa (g)",
        placement = "right"
      ),
      popover(
        bsicons::bs_icon("gear", class = "ms-auto"),
        tags$style(type='text/css', ".selectize-input { font-size: 12px; line-height: 12px;} .selectize-dropdown { font-size: 12px; line-height: 12px; }"),
        selectInput("yvar", "Separar por", c("sexo" = "sex", "especie" = "species",
                                             "isla" = "island")),
        selectInput("color", "Colorear por", c("especie" = "species", 
                                               "isla" = "island", "sexo" = "sex"),
                    "island"),
        title = "Ajustes para la gráficación",
      ),
      class = "d-flex align-items-center gap-1"
    ),
    plotOutput("plt"),
    card_footer(
      "Fuente: Gorman KB, Williams TD, Fraser WR (2014).",
      popover(
        a("Para saber más", href = "#"),
        markdown(
          "Originalmente publicado en: Gorman KB, Williams TD, Fraser WR (2014) Ecological Sexual Dimorphism and Environmental Variability within a Community of Antarctic Penguins (Genus Pygoscelis). PLoS ONE 9(3): e90081. [doi:10.1371/journal.pone.0090081](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081)"
        )
      )
    )
  )
)

server <- function(input, output, session) 
  {
    output$plt <- renderPlot(
      {
        ggplot(penguins, 
               aes(x = body_mass_g, y = !!sym(input$yvar), 
                   fill = !!sym(input$color))) +
          ggridges::geom_density_ridges(scale = 0.9, alpha = 0.5) +
          coord_cartesian(clip = "off") +
          labs(x = NULL, y = NULL) +
          ggokabeito::scale_fill_okabe_ito() +
          theme_minimal(base_size = 18) +
          theme(legend.position = "top")
      })
}

shinyApp(ui, server)
```


# Elio

```{shinylive-r}
#| standalone: true
#| viewerHeight: 500

library(bslib)
library(shiny)
library(plotly)
library(shinyjs)
library(shinythemes)
library(sf)
library(leaflet)
library(leaflet.extras)
library(readxl)
library(stringr)

ui2 <- fluidPage(
    tags$img(src = "imagenes/background.jpeg", 
             style = "position: absolute"),
    theme = shinytheme("darkly"),
    useShinyjs(),
    sidebarLayout(
      sidebarPanel(tags$style(HTML("hr {border-top: 1px solid #000000;}
                  .well {height: 1200px;}")),
      fluidRow(
        column(12,
               HTML("<div style='height: 90px; text-align: center; font-size: 20px;'>"),
               tags$a("Proyecto: "),   
               tags$b(htmlOutput("clickDataOut")), 
               tags$br()),
        HTML("</div>")),
      
     fluidRow(
        column(12,
               HTML("<div style='height: 220px; text-align: center;'>"),
               imageOutput("fotito"),
               HTML("</div>"))),
     
     fluidRow(
        align = "center",
        HTML("<div style='height: 50px; text-align: center; font-size: 20px;'>"),
        tags$b("Institución:"),
        HTML("</div>"),
        column(12,
               HTML("<div style='height: 50px; width: 100px; text-align: center; background-color:white;'>"),
               imageOutput("loguito"),
               HTML("</div>"))),
     div(tags$br()),
     fluidRow(
       column(12, 
              HTML("<div style='text-align: center;'>"),
              textOutput("textito"),
              HTML("</div>")
              )
       ),
     
     div(tags$br()),
     fluidRow(
       align = "center",
       column(12,
              HTML("<div style='height: 100px;'>"),
              leafletOutput("map", width = "80%", height = "250px"),
              HTML("</div>")))),
     
     mainPanel(
       tags$style(HTML(".plot-container.plotly {background:#00000000}")),
       plotlyOutput("sunburst", height = "800px"),
       htmlOutput("hoverDataOut"))
     )
  )

server2 <- function(input, output, session) 
  {
    temp <- reactive(
      {
        edos %>%
        dplyr::filter(grepl(
          ifelse(length(clickData()[3]) == 0,
                 "Jalisco",
                 pronas$colapser[pronas$ids ==  clickData()[3]]),
          NOMGEO))
      })
    
    output$map = renderLeaflet( 
      {
        leaflet() %>%  
        setView(lng = -98.884, 
                lat = 20.87757, 
                zoom = 6)  %>% 
        addTiles()  %>% 
        #addProviderTiles(provider = providers$Stamen.Watercolor) %>% 
        addPolygons(data = temp(),
                    popup =  ~ paste0("<b>Proyecto: </b>", NOMGEO,"<br>"), 
                    fillColor = "magenta", color = "magenta",
                    group = "Proyectos",
                    highlightOptions = highlightOptions(color = "gold", 
                                                      fillColor = "gold"))
      })
    
    observe(
      {
        proyis = temp()
        proyisbb = st_bbox(proyis)
        leafletProxy("map", data = proyis) %>%
          flyToBounds(proyisbb[[1]],
                      proyisbb[[2]], 
                      proyisbb[[3]], 
                      proyisbb[[4]]) %>% 
#   flyTo(st_coordinates(st_centroid(proyis))[1], st_coordinates(st_centroid(proyis))[2], 8) %>%
          addPolygons(stroke = FALSE ) #|>
# leaflet::addLayersControl(overlayGroups = c("Municipios", "Proyectos"),
#                          options = layersControlOptions(collapsed = FALSE) )
      })
    
    output$sunburst <- renderPlotly(
    {
      plot_ly(data = pronas, 
            source = "sunSource", 
            customdata = ~ids, 
            ids = ~ ids, 
            labels = ~ nombrecorto, 
            parents = ~ parents, 
            #values = ~ values, 
            type ='sunburst', 
            branchvalues = 'total') %>%
      layout(
             paper_bgcolor = 'rgba(0,0,0,0',
             plot_bgcolor = 'rgba(0,0,0,0)')
    })
  
#  hoverData <- reactive({
#    currentEventData <- unlist(event_data(event = "plotly_hover", source = "sunSource", priority = "event"))
#  })
    
    clickData <- reactive(
      {
        currentEventData <- unlist(event_data(event = "plotly_sunburstclick", 
                                              source = "sunSource", 
                                              priority = "event"))
      })
  
#  output$hoverDataOut <- renderText({
#    paste("Hover data:", paste(names(hoverData()), unlist(hoverData()), sep = ": ", collapse = " | "))
#  })
  
  output$clickDataOut <- renderText({gsub(".*- ", "", paste(clickData()[3]))})
  
  output$textito <- renderText(
    {
      ifelse(length(clickData()) == 0,
             "Explorador de los proyectos PRONAI del Consejo Nacional de Humanidades Ciencia y Tecnología",
             pronas$texto[pronas$ids == clickData()[3]] )
    }) 
  
  output$fotito = renderImage(
    {
      # en el servidor sí pide www si los lee así (no como las otras apps que he hecho)
      fileimg = pronas$nombrecorto[pronas$ids == clickData()[3]] %>%  
        iconv(to  = "ASCII//TRANSLIT")
      filename = sprintf("imagenes/foto_%s.jpeg", 
                         gsub(" |\n", "_", 
                              tolower(fileimg)))
      
      list(src = ifelse(length(filename) == 0, 
                        "imagenes/inecol.jpg", 
                        filename ),
           width = "80%", height = "220px")
    },
    deleteFile = FALSE)
  
  output$loguito = renderImage(
    {
    # en el servidor sí pide www si los lee así (no como las otras apps que he hecho)
      filelogo =  pronas$logo[pronas$ids == clickData()[3]]
      filename = paste0("imagenes/logo_", filelogo, ".png")
      list(src = ifelse(length(filelogo) == 0, 
                        "imagenes/logo_inecol.png", 
                        filename),
           width = "100%", 
           height = "50px" )
    },
    
    deleteFile = FALSE)
  }

shinyApp(ui2, server2)

```



